from tkinter import *
import math
import time
from PIL import Image, ImageTk
import random

win = Tk()
win.title("Game")
win_w, win_h = (800, 800)
win.geometry(f"{win_w}x{win_h}")

def press(event):
    global up_go, down_go, space_go, stage
    if stage == 1:
        if event.keysym == "Up":
            up_go = True
        elif event.keysym == "Down":
            down_go = True
        if event.keysym == "space":
            space_go = True
            stage = 2
        
def release(event):
    global up_go, down_go, space_go, bomb_cx, bomb_cy, bomb_vx, bomb_vy, bomb, stage
    if stage == 1:
        if event.keysym == "Up":
            up_go = False
        elif event.keysym == "Down":
            down_go = False
    if stage == 2:
        if event.keysym == "space":
            space_go = False
            bomb_cx = round(tank_cx + tank_w/2*math.cos(angle_now))
            bomb_cy = round(tank_cy - tank_w/2*math.sin(angle_now))
            bomb_vx = round(bomb_v_max * power / 100 * math.cos(angle_now))
            bomb_vy = round(-bomb_v_max * power / 100 * math.sin(angle_now))
            bomb = cvs.create_oval((bomb_cx-bomb_r, bomb_cy-bomb_r),(bomb_cx+bomb_r, bomb_cy+bomb_r), fill = "red")
            stage = 3

up_go, down_go, space_go = (False, False, False)       
stage = 1
hit = False
win.bind("<KeyPress>", press)
win.bind("<KeyRelease>", release)

cvs = Canvas(win)
cvs.config(width=win_w, height=win_h, bd=0, highlightthickness = 0)
cvs.pack()

# Background
bot_h = round(win_h * 1/5)
bot_c = "#a6a6a6"
cvs.create_rectangle((0, win_h-bot_h), (win_w, win_h), fill = bot_c, outline = bot_c)
mid_h = round((win_h - bot_h) / 8)
mid_c = "#994d00"
cvs.create_rectangle((0, win_h-bot_h-mid_h), (win_w, win_h-bot_h), fill = mid_c, outline = mid_c)
top_h = win_h-bot_h-mid_h
top_c = "#b5b5fd"
cvs.create_rectangle((0, 0), (win_w, top_h), fill = top_c, outline = top_c)

# Angle
angle_r = round(bot_h/2)
angle_mx = round(win_w/20)
angle_my = round(bot_h/4)
angle_ctr = (angle_r+angle_mx, win_h-bot_h+angle_my+angle_r)
cvs.create_arc((angle_ctr[0]-angle_r,angle_ctr[1]-angle_r),(angle_ctr[0]+angle_r,angle_ctr[1]+angle_r),fill = "#6666ff" ,extent=180)
angle_min = 30 *math.pi/180
angle_max = 90 *math.pi/180
cvs.create_line(angle_ctr, (angle_ctr[0]+angle_r*math.cos(angle_min) ,angle_ctr[1]-angle_r*math.sin(angle_min)), width = 2)
cvs.create_line(angle_ctr, (angle_ctr[0]+angle_r*math.cos(angle_max) ,angle_ctr[1]-angle_r*math.sin(angle_max)), width = 2)
cvs.create_arc((angle_ctr[0]-round(angle_r/5),angle_ctr[1]-round(angle_r/5)),(angle_ctr[0]+round(angle_r/5),angle_ctr[1]+round(angle_r/5)),fill = "#ffcccc" ,extent=180)
angle_now = 45 *math.pi/180 
angle_line = cvs.create_line(angle_ctr, (angle_ctr[0]+angle_r*math.cos(angle_now) ,angle_ctr[1]-angle_r*math.sin(angle_now)), fill = "red", width = 3)

# Tank  
tank_w, tank_h = (round(min(win_w, win_h)/10), round(min(win_w, win_h)/10))
tank_cx = round(win_w/40+tank_w/2)
tank_cy = top_h - round(tank_h/2)
tank_img = Image.open("C:/PIL/canon.png")
tank_img = tank_img.resize((tank_w,tank_h),Image.Resampling.NEAREST)
tank_img = tank_img.rotate(angle_now)
tank_img = ImageTk.PhotoImage(tank_img, master=win)
tank = cvs.create_image(tank_cx, tank_cy, image=tank_img)

# Gauge bar
gbar_mx = angle_mx
gbar_my = angle_my
gbar_w = win_w - angle_mx - gbar_mx*2 - angle_r*2
gbar_h = bot_h - gbar_my*2
gbar_x = angle_mx+ angle_r*2 + gbar_mx
gbar_y = win_h - gbar_my -gbar_h
cvs.create_rectangle((gbar_x,gbar_y),(gbar_x+gbar_w,gbar_y+gbar_h), fill = "white")
rbar_mx = round(gbar_h/8)
rbar_my = rbar_mx
rbar_x = gbar_x + rbar_mx
rbar_y = gbar_y + rbar_my
power = 0
rbar_w = (gbar_w - rbar_mx*2) * power / 100
rbar_h = gbar_h - rbar_my*2
rbar = cvs.create_rectangle((rbar_x,rbar_y),(rbar_x+rbar_w,rbar_y+rbar_h), width = 0, fill = "red")

# Bomb
bomb_r = 10
bomb_v_max = 50
bomb_ay = 1

# Windbar
wbar_mx = gbar_mx
wbar_my = wbar_mx
wbar_w = wbar_mx * 8
wbar_h = wbar_my * 2
wbar_x = win_w - wbar_mx - wbar_w
wbar_y = wbar_my
cvs.create_rectangle((wbar_x,wbar_y), (wbar_x+wbar_w,wbar_y+wbar_h), width = 2, fill = "white")
cvs.create_line((round(wbar_x+wbar_w/2),wbar_y),(round(wbar_x+wbar_w/2),wbar_y+wbar_h), width=2)
wind = 0
wind_ax_max = 0.2
wind_ax = wind_ax_max * wind / 100
bbar_mx = round(wbar_h/10)
bbar_my = bbar_mx
if wind >= 0: bbar_x = round(wbar_x+wbar_w/2)+bbar_mx
else : bbar_x = round(wbar_x+wbar_w/2)-bbar_mx
bbar_y = wbar_y + bbar_my
bbar_w = (wbar_w/2 - 2*bbar_mx)*wind/100
bbar_h = wbar_h - 2*bbar_my
bbar = cvs.create_rectangle((bbar_x,bbar_y), (bbar_x+bbar_w,bbar_y+bbar_h), width=0, fill = "blue")

# target
t_r =40
t_range_x = (round(win_w/3), win_w-t_r)
t_range_y = (wbar_y+wbar_h+t_r, top_h-t_r)
# cvs.create_rectangle((t_range_x[0],t_range_y[0]), (t_range_x[1],t_range_y[1])    )
t_cx = random.randrange(t_range_x[0], t_range_x[1])
t_cy = random.randrange(t_range_y[0], t_range_y[1])
t_img = Image.open("C:/PIL/target.png")
t_img = t_img.resize((t_r*2, t_r*2), Image.Resampling.NEAREST)
t_img = ImageTk.PhotoImage(t_img, master=win)
target = cvs.create_image(t_cx, t_cy, image=t_img)

# Count box
cbox_x = wbar_mx
cbox_y = wbar_my
cbox_w = cbox_x*3
cbox_h = wbar_h
cvs.create_rectangle((cbox_x, cbox_y),(cbox_x+cbox_w, cbox_y+cbox_h), fill = "black",outline = "red", width=2)
count = 0
c_box = cvs.create_text((round(cbox_x+cbox_w/2), round(cbox_y+cbox_h/2)), fill="white", font=("Arial", 30), text=count)

win.update()

while True:
    time.sleep(0.01)
    cvs.delete(angle_line)
    cvs.delete(tank)
    cvs.delete(rbar)
    cvs.delete(bbar)
    try:
        cvs.delete(bomb)
    except:
        pass
    if stage == 1:
        if up_go == True and down_go == False and angle_now <= angle_max:
            angle_now += 0.01
        elif down_go == True and up_go == False and angle_now >= angle_min:
            angle_now -= 0.01
    if stage == 2:        
        if space_go == True and power < 100:
            power += 1
    if stage == 3:
        wind_ax = wind_ax_max * wind / 100
        bomb_vx += wind_ax
        bomb_vy += bomb_ay
        bomb_cx += bomb_vx
        bomb_cy += bomb_vy
        dist = ((bomb_cx-t_cx)**2 + (bomb_cy-t_cy)**2)**0.5
        if dist <= bomb_r+t_r :
            hit = True
        if bomb_cy >= top_h or hit == True :
            stage = 1
            power = 0
            wind += random.randrange(-100,101)
            if wind < -100 : wind = -100
            elif wind > 100 : wind = 100
            if hit == True:
                cvs.delete(target)
                cvs.delete(c_box)
                t_cx = random.randrange(t_range_x[0], t_range_x[1])
                t_cy = random.randrange(t_range_y[0], t_range_y[1])
                target = cvs.create_image(t_cx, t_cy, image=t_img)
                count += 1
                c_box = cvs.create_text((round(cbox_x+cbox_w/2), round(cbox_y+cbox_h/2)), fill="white", font=("Arial", 30), text=count)
                hit = False
        
    angle_line = cvs.create_line(angle_ctr, (angle_ctr[0]+angle_r*math.cos(angle_now) ,angle_ctr[1]-angle_r*math.sin(angle_now)), fill = "red", width = 3)
    tank_img = Image.open("C:/PIL/canon.png")
    tank_img = tank_img.resize((tank_w,tank_h), Image.Resampling.NEAREST)
    tank_img = tank_img.rotate(angle_now*180/math.pi-10)
    tank_img = ImageTk.PhotoImage(tank_img, master=win)
    tank = cvs.create_image(tank_cx, tank_cy, image=tank_img)
    rbar_w = (gbar_w - rbar_mx*2) * power / 100
    if wind >= 0: bbar_x = round(wbar_x+wbar_w/2)+bbar_mx
    else : bbar_x = round(wbar_x+wbar_w/2)-bbar_mx
    bbar_w = (wbar_w/2 - 2*bbar_mx)*wind/100
    if wind !=0:
        bbar = cvs.create_rectangle((bbar_x,bbar_y), (bbar_x+bbar_w,bbar_y+bbar_h), width=0, fill = "blue")
    if power > 0 :
        rbar = cvs.create_rectangle((rbar_x,rbar_y),(rbar_x+rbar_w,rbar_y+rbar_h), width = 0, fill = "red")
    if stage == 3:
        bomb = cvs.create_oval((bomb_cx-bomb_r, bomb_cy-bomb_r),(bomb_cx+bomb_r, bomb_cy+bomb_r), fill = "red")
    win.update()
